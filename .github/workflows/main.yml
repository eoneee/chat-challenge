name: Build and Deploy Spring Boot to AWS EC2

# main 브랜치에 푸쉬 했을때
on:
  push:
    branches: [ cassandra ]

# 해당 코드에서 사용될 변수 설정
env:
  PROJECT_NAME: chatchallenge
  BUCKET_NAME: chatchallengebucket
  CODE_DEPLOY_APP_NAME: codeDeploy-test
  DEPLOYMENT_GROUP_NAME: codeDeploy-group
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  DOCKER_IMAGE: chat
  DOCKER_CONTAINER: chatservice

permissions: write-all

jobs:
  build-with-gradle:
    runs-on: ubuntu-20.04
    steps:
      - name: main 브랜치로 이동
        uses: actions/checkout@v3

      - name: JDK 11 setup
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Jasypt 키 주입
        run: |
          echo ${{secrets.JASYPT}} | base64 --decode >> ./src/main/resources/application-common.yml
          echo ${{secrets.JASYPT}} | base64 --decode >> ./src/test/resources/application-common.yml
          
      - name: gradlew에 실행 권한 부여
        run: chmod +x ./gradlew
        
      - name: 프로젝트 빌드
        run: ./gradlew clean build

      - name: 테스트 결과를 PR에 코멘트로 등록합니다
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트를 등록합니다
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

      - name: Docker Image Build
        run: docker build -t $DOCKER_USERNAME/$DOCKER_IMAGE .

      - name: Docker Push
        run: docker push $DOCKER_USERNAME/$DOCKER_IMAGE

      - name: AWS 접속 및 Docker 실행
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}

          script: |
            sudo docker kill $DOCKER_CONTAINER
            sudo docker rm -f $DOCKER_CONTAINER
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE
            
            sudo docker run -i -t \
            -p ${{ secrets.PORT }} \
            --name chat \
            --add-host host.docker.internal:host-gateway
            -d ${{ secrets.DOCKERHUB_USERNAME }}/$DOCKER_IMAGE

